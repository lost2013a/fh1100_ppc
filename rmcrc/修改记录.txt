2017.11.20-2017.11.22
	修改全局变量的位置和定义，部分重名的变量，部分易混淆的函数名重命名。
	合并部分头文件。
	新增bsp.c和bsp.h(做主要的头文件)。
	消除所有的告警。
	Makefile加入-Wall参数，并消除所有的告警。
2017.11.23
	优化6个网口的配置部分代码，减少代码长度。
	把日志判断合并到主线程，同时去掉两进程之间的同步机制。
2017.11.24
	重写CAN发送的处理:
		1.重发次数到达一定时才阻塞任务。
		2.重发次数到达一定时(更多)放弃该包报文的发送。
		3.删除发送中usleep的随意调用。
	优化6个网口配置CAN接和发代码。
	部分配置参数重写。
2017.11.30
	重写网关设置函数。
	调整装置晶振驯服状态的判断。
	调整装置日志，数据计算，插槽存取等函数的位置。
2017.12.5
	prctl给线程命名，便于调试。
	修改Pthread_5_udp的睡眠阻塞时间为10ms(注:<1ms系统开销太大，会让CPU占用增加到3%左右)
2017.12.6
	增加串口大时间的数字滤波器，只在稳态下才修改系统和硬件时间。
	CPU未获取到装置时间前，调试日志(记录)全部保存到prog_log.init文件。
	//CPU获取到装置时间后，才做一些装置日志判断。包括：
	//	[18]晶振驯服状态
2017.12.7
	加入-W -O2编译选项，消除告警
	增加串口首帧的未对齐的容错机制
2017.12.8
	写调试日志记录时，超过256字节强制截断
	重写写调试日志记录的函数，改用互斥信号来做同步，并一次写完缓存的日志
2017.12.13
	线程3中，解决while循环中break导致的线程退出问题。并且在外面在加一层死循环做保险。
	信号sem_can_dy_send最大值只能为1。
2017.12.15
	加入系统时间和CPU硬件时间的闰秒(处理来自FPGA的闰秒预告和标志)功能
2017.12.25
	修改装置日志的组包函数。
	使用CAN硬件滤波规则，只接收ID是0x031xxxxx的CAN帧。
2017.12.27
	修改串口接收的时序，改为接收到头后睡眠大概400ms(剩余串口传输时间+系统耗费)，再一次收完。
	修改CAN接收函数，不再使用阻塞方式，收到不正确报文，等待数次无果会清空数据(5帧)，准备下一次接收。并构建1个接口函数供全局调用。
2017.12.28
	只在开机的时候读取插槽状态文件，避免插槽状态文件的(可能存在的)读写冲突,同时避免配置时对该区域的点表清0。
2018.01.02
	增加板卡类型(值)的变位UDP上送,板卡状态文件保存的数据由板卡的(bool)有无变为板卡的类型。
2018.01.03
	1.推迟配置的生效时间到作事件判断之前，从而不再收到配置就全清(做事件产生依据的)状态数据。流程大概如下：
	
		(异步的)CAN1接收配置->置有新配置的标志
					↓			→  →	→	→ 使用配置文件做规则
								↑				↓				  
		串口->(尝试)读取有无新配置->计算数据->产生新的状态数据->判断产生事件
												↑
		来自上次的状态→	 	→		→		→ 对比状态数据(点表)

	2.状态数据生产函数精简。

2018.01.05
	修改UDP状态在点表初始化完成后才发送。
	晶振驯服状态的初始化放在点表初始化过程中，不再是获得装置时间后。
2018.01.10
	对调了状态控制字中全局控制1和2的内容。
	全局控制1和2不再对源优先级起效。
	增加了点表[61]:装置同步状态的事件逻辑。61原来关联的是初始化状态，现单独提出一个同步状态。
2018.01.24
	1.BDS板卡状态[89]和GPS板卡状态[91],不再取值于BDS,GPS模块状态([8],[9]),独立取状态值。
	2.BDS和GPS全局控制字不再关联BDS板卡状态[89](含[90])和GPS板卡状态[91](含[92]),同时增加点[89][90][91][92]的变位UDP上送。
	3.晶振驯服告警状态[17]逻辑变更为:未驯服前,直接等于底层晶振驯服状态
								     驯服后,连续60s后才异常判断
	4.废弃点[27]。
2018.01.25
	1.在事件判断之前对北斗和GPS模块的信息位滤波，并在初始化事件点表时对该滤波器赋初值。


